#TODO: make it an actual docx with hyperlinks and crossreferences to different elements (classes, functions, parameters etc).

As in its name, this app is designed to help volleyball enthusiasts and professionals, such as coaches, players, officials etc with sport-related activities, both during and 
off-match. 

This document is design to provide programming-savvy users with general architectural overview and specific references.

First, let me tell that the following is the fifth architectural design used in the development of this app. The first one was a complete mess, the second one was a structured mess, 
the third one was a relatively good construction based on said structured mess, the fourth one was some weird futuristic concept that was decided to try due to the pause in the 
development of the third one (hello, quarantine), and the current fifth one is another form of the third one but written from scratch due to said pause.
As you can see, I'm happy to finally write this.

Now, a few words about what's what and how it works.

The app is creared using Python, Kivy, and PIL. 

There are several important cornstone-concepts of the code's architecture:

* OBJECTS, including
    * EVENTS
    * VISUAL ELEMENTS 
    * REQUESTS
    * LOGS

* SCREENS

* DATA CONFIG, including
    *APP CONFIG
    *MATCH CONFIG
    *LOCALIZATION
    *PROTOCOL IMAGE BORDERS
    *INTERVAL INSTRUCTIONS

* CORE FUNCTIONS 

So, basically, these are all the cornstones...

Before we start, let's go through the directory structure. In the root directory we have the following list:

    /docs 
    /gfx
    /logs
    /meta 
    /py
    DVA.exe 
    DVA.pyw 
    icon.ico

If you work in developer's version, i.e. you're me, you also have 

    run.pyw
    run.spec

We need to go deeper. This is description of (almost) each point, including sub-structure.

    run.pyw - this is a loading script for our main code. Long story short: customization files (app_ and match_config, localization, and protocol image borders) were first 
    creared with py extensions. The reason for that is that yours truly was not aware of the fact that py.modules are imported during compilation and not runtime. As customization
    requires to apply changes whenever they done (saved, to be precise), and changing the structure of importing those files would be very time consuming, the quick-fix was found
    in form of "shell-script" that only has one job - run the main script with all of its dependencies imported during runtime.

    run.spec - "pre-cooked" spec file for faster compiling run.pyw 

    icon.ico - icon of the app.  
    
    DVA.pyw - main script which creates window, load logs etc. 

    DVA.exe - result of compiling run.spec. App's main and only executable.

    /docs - folder that contains this overview / references list, user instruction, and license information.

    /logs - folder that contains .txt file(s) for logs. Currently, we have two logs - for events and requests. Events' log is being creared and fullfilled in different ways, 
    including requests' log but only exists during runtime and has no .txt representation. Requests' log, on another hand, may or may not have .txt file, depending on if any 
    request has occured.

    /meta - folder for meta stuff (as in the name). Currently contains localization and app config. 

    /gfx - folder that contains everything related to graphics, including visual files, design code, and some processing code, including complicated processing code.
    The folder itself has the following structure:

        /background_pictures
        /match
        frontend.py 
        interval_instructions.py 
        visual_elements.py
        loading.gif

        Now, about every file, as usual:

        loading.gif - gif image that will be supposed to popup during time-consuming processes and 1)notify the user what's going on and that the programm did not freeze, 2)block
        user from chaotically clicking and actually freezing the programm, 3)just generaly make the programm looks nicer. As for now, the only one time-consuming process is 
        generation of protocol image, and it does not work there due to some technical difficulties. But it will in the future! 

        visual_elements.py - file that contains code of VisualElement class and all the classes that inheirit from it including their methods. For explanaition of what Visual
        Element is, look below the directory structure.

        interval_instructions.py - file containing instructions for interval window in form of string. Basically, in the programm there's an interval window that popups when
        there's some interval to wait, such as 1)before court entry, 2)before coin toss, 3)before set start, 4)before time out end, and has a timer, so interval_instructions.py
        stores instructions in str form to be executed by code in frontend.py

        frontend.py - backbone of all GUI in the programm. It has code for 


Anyway, let's inspect them in detail, shall we? The following is the description of each category, what it is, what it does, why so etc. For an actual reference list, look below.

Let's start with the simpliest now. 

CORE FUNCTIONS

Basically

